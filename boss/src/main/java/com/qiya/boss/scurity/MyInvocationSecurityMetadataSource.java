package com.qiya.boss.scurity;import java.util.*;import javax.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.AccessDeniedException;import org.springframework.security.access.ConfigAttribute;import org.springframework.security.access.SecurityConfig;import org.springframework.security.web.FilterInvocation;import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;import org.springframework.stereotype.Service;import com.qiya.framework.middletier.model.ScurityResource;import com.qiya.framework.middletier.service.ScurityResourceService;import com.qiya.framework.middletier.service.ScurityRoleResourceService;import com.qiya.framework.middletier.service.ScurityRoleService;/** * Created by qiyalm on 16/6/16. */@Service("securityMetadataSource")public class MyInvocationSecurityMetadataSource implements FilterInvocationSecurityMetadataSource {    @Autowired    private AntUrlPathMatcher antUrlPathMatcher;    @Autowired    private ScurityRoleService roleService;    @Autowired    private ScurityResourceService resourceService;    @Autowired    private ScurityRoleResourceService roleResourceService;    private static Map<String, Collection<ConfigAttribute>> resourceMap = null;    //加载角色对应的资源    @PostConstruct    public void loadResourceDefine(){        resourceMap = new HashMap<String, Collection<ConfigAttribute>>();        List<ScurityResource> resourceList = resourceService.getAllResource();        for (ScurityResource resource:resourceList) {            List<Map<String,Object>> roleResList = roleResourceService.getRoleByRes(resource.getResourceId());            String[] codes = resource.getResourceCode().split(";");            for (String str:codes) {                Collection<ConfigAttribute> att = new ArrayList<ConfigAttribute>();                for (Map<String,Object> map:roleResList) {                    ConfigAttribute ca = new SecurityConfig(map.get("roleName").toString());                    att.add(ca);                }                if (roleResList.size() == 0){                    resourceMap.put(str,null);                    break;                }                resourceMap.put(str,att);            }         }    }    //加载角色对应的资源V1//    @PostConstruct//    public void loadResourceDefineV1(){//        resourceMap = new HashMap<String, Collection<ConfigAttribute>>();//        if (roleService!=null){//            List<ScurityRole> roleList=roleService.getAllRoles();//            if (roleList.size()>0){//                for (ScurityRole role:roleList) {////                    Collection<ConfigAttribute> atts = new ArrayList<ConfigAttribute>();////                    ConfigAttribute ca = new SecurityConfig(role.getRoleName());////                    atts.add(ca);//                    //获取当前角色志愿//                    List<Map<String,Object>>resourceList=roleResourceService.getResourceByRole(role.getRoleId());//                    //遍历资源//                    for (Map<String,Object> map:resourceList) {//                        String code=map.get("url").toString();//                        String[] codes=code.split(";");//                        for (String str:codes) {//                            if (resourceMap.get(str)!=null){//                                Collection<ConfigAttribute> att = resourceMap.get(str);//                                ConfigAttribute ca1 = new SecurityConfig(role.getRoleName());//                                att.add(ca1);//                                //resourceMap.put(str,att);//                            }else {//                                Collection<ConfigAttribute> atts = new ArrayList<ConfigAttribute>();//                                ConfigAttribute ca = new SecurityConfig(role.getRoleName());//                                atts.add(ca);//                                resourceMap.put(str,atts);//                            }//                        }//                    }//                }//            }//        }//    }    public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException{        // object is a URL.        String url = ((FilterInvocation) object).getRequestUrl();        Iterator<String> ite = resourceMap.keySet().iterator();        while (ite.hasNext()) {            String resURL = ite.next();            if (antUrlPathMatcher.pathMatchesUrl(url, resURL)) {                if (resourceMap.get(resURL) == null) {   //当菜单资源没有分配权限时抛出403异常                    throw new AccessDeniedException("没有权限访问!");                }                Collection<ConfigAttribute> returnCollection = resourceMap.get(resURL);                return returnCollection;            }        }        return null;    }    public Collection<ConfigAttribute> getAllConfigAttributes(){        return null;    }    public boolean supports(Class<?> var1){        return true;    }}